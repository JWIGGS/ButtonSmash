module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output ledPlayerScore[2][7],
    output ledPlayerSize[2][3],
    output ledSequence[2][8],
    output ledSegment[8],
    input button[6]
  ) {

  // reset signal
  sig rst;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  button_manager module_buttons(.clk(clk), .rst(rst));
  control_unit module_control(.clk(clk), .rst(rst));
  alu_whole module_alu;
  segment_manager module_segment;

  sig regfile[16][16];
  
  always {
  

    //---------------------------------------STANDARD ALWAYS STUFF---------------------------------------//
    
    // input raw inverted reset signal
    reset_cond.in = ~rst_n;

    // conditioned reset
    rst = reset_cond.out;

    // loop serial port
    usb_tx = usb_rx;
      
    // turn on board led off
    led = 8h00;
    
    //alu inputs
    module_alu.alufn = module_control.alufn;
    module_alu.a = module_control.a;
    module_alu.b = module_control.b;
    
    //control inputs
    module_control.wd = module_alu.result;
    module_control.buttonPressed = module_buttons.buttonPressedOut;
    
    //sneaky control output to regfile signal
    regfile = module_control.regfileRead;
    
    //button inputs
    module_buttons.buttonRaw = button;
    module_buttons.buttonSeen = module_control.buttonSeenOut;
    
    //led outputs
    ledPlayerScore[0] = regfile[Register.P1_SCORE][6:0];
    ledPlayerScore[1] = regfile[Register.P2_SCORE][6:0];  
    
    ledPlayerSize[0] = regfile[Register.P1_SIZE][2:0];
    ledPlayerSize[1] = regfile[Register.P2_SIZE][2:0];
    
    ledSequence[0] = regfile[Register.CHECK_LEFT][7:0];
    ledSequence[1] = regfile[Register.CHECK_RIGHT][7:0];
    
    //segment manager
    module_segment.regfileCountdown = regfile[Register.COUNTDOWN];
    ledSegment = module_segment.ledSegment;
    


  }
}

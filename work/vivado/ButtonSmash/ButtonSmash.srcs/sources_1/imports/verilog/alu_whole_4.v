/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_whole_4 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] result
  );
  
  
  
  wire [16-1:0] M_function_addition_result;
  wire [1-1:0] M_function_addition_z;
  wire [1-1:0] M_function_addition_v;
  wire [1-1:0] M_function_addition_n;
  reg [6-1:0] M_function_addition_alufn;
  reg [16-1:0] M_function_addition_a;
  reg [16-1:0] M_function_addition_b;
  alu_adder_8 function_addition (
    .alufn(M_function_addition_alufn),
    .a(M_function_addition_a),
    .b(M_function_addition_b),
    .result(M_function_addition_result),
    .z(M_function_addition_z),
    .v(M_function_addition_v),
    .n(M_function_addition_n)
  );
  
  wire [16-1:0] M_function_boolean_result;
  reg [6-1:0] M_function_boolean_alufn;
  reg [16-1:0] M_function_boolean_a;
  reg [16-1:0] M_function_boolean_b;
  alu_boolean_9 function_boolean (
    .alufn(M_function_boolean_alufn),
    .a(M_function_boolean_a),
    .b(M_function_boolean_b),
    .result(M_function_boolean_result)
  );
  
  wire [16-1:0] M_function_shifter_result;
  reg [16-1:0] M_function_shifter_a;
  reg [16-1:0] M_function_shifter_b;
  reg [6-1:0] M_function_shifter_alufn;
  alu_shifter_10 function_shifter (
    .a(M_function_shifter_a),
    .b(M_function_shifter_b),
    .alufn(M_function_shifter_alufn),
    .result(M_function_shifter_result)
  );
  
  wire [16-1:0] M_function_compare_result;
  reg [6-1:0] M_function_compare_alufn;
  reg [1-1:0] M_function_compare_v;
  reg [1-1:0] M_function_compare_z;
  reg [1-1:0] M_function_compare_n;
  alu_compare_11 function_compare (
    .alufn(M_function_compare_alufn),
    .v(M_function_compare_v),
    .z(M_function_compare_z),
    .n(M_function_compare_n),
    .result(M_function_compare_result)
  );
  
  always @* begin
    M_function_addition_a = a;
    M_function_addition_b = b;
    M_function_addition_alufn = alufn;
    M_function_boolean_a = a;
    M_function_boolean_b = b;
    M_function_boolean_alufn = alufn;
    M_function_shifter_a = a;
    M_function_shifter_b = b;
    M_function_shifter_alufn = alufn;
    M_function_compare_z = M_function_addition_z;
    M_function_compare_v = M_function_addition_v;
    M_function_compare_n = M_function_addition_n;
    M_function_compare_alufn = alufn;
    
    case (alufn[4+1-:2])
      2'h0: begin
        result = M_function_addition_result;
      end
      2'h1: begin
        result = M_function_boolean_result;
      end
      2'h2: begin
        result = M_function_shifter_result;
      end
      2'h3: begin
        result = M_function_compare_result;
      end
      default: begin
        result = 15'h0000;
      end
    endcase
  end
endmodule
